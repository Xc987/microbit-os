{"README.md":"# Kodley dot \n\nA micro:bit extension for **dot**, an implementation of LOGO like turtle. \n**dot** is a single pixel LED that can be moved around the micro:bit screen. Primary focus of **dot**, is to introduce concepts like sequencing, loops etc.\n\nUsing **dot**, students can work on various patterns/puzzles such as drawing a line, creating shapes like \n a square, a triangle, or forming numbers and letters using LEDs. To get **dot** to complete the puzzles, students experience how to break down puzzles into simple, repeatable steps and, in the process, learn the importance of making sure the steps in the program are written in the correct sequence. Students will practice their sequencing and debugging skills while completing the puzzles and learn how to order **dot** commands such as move forward, move backward, change directions using turn left or turn right as sequential steps in a program.\n\n## Setup & Intro Videos\n\ndot introductory videos \n\n[Walk-thru setting up dot video](https://www.youtube.com/watch?v=1nse-mlKPsA)  \n\n[dot intro video](https://youtu.be/jNrXkMRNLGw)\n\n## dot Tutorials \nTutorials to get you started with dot\n\n[Learning to use move forward block](https://makecode.microbit.org/#tutorial:github:kodely-io/dottutorials/dotstep1)  \n\n[Learning to use move backward block](https://makecode.microbit.org/#tutorial:github:kodely-io/dottutorials/dotstep2)  \n\n[Using move forward and move backward blocks](https://makecode.microbit.org/#tutorial:github:kodely-io/dottutorials/dotstep3)  \n\n[Using turn left and turn right blocks](https://makecode.microbit.org/#tutorial:github:kodely-io/dottutorials/dotstep4)  \n\n# Kodely dot reference\n\n## home #home\n`dot.home()` moves the **dot** to the center of the screen. **dot** will be facing forward and pen will be in down mode\n\n```blocks\ndot.home()\n```\n## move forward #moveforward\n`dot.moveForward()` moves the **dot** one step forward, in the current direction. If the pen is set to down,  it will highlight the LED in that position.\n\n```blocks\ndot.moveForward()\n```\n## move backward #movebackward\n`dot.moveBackward()` moves the **dot** one step backward based on the current direction. If the pen is set to down, it will highlight the LED in that position.\n\n```blocks\ndot.moveBackward()\n```\n## turn right #turnright\n`dot.turnRight()` turns the **dot** to the right 90 degrees.\n\n```blocks\ndot.turnRight()\n```\n## turn left #turnleft\n`dot.turnLeft()` turns the **dot** to the left 90 degrees.\n\n```blocks\ndot.turnLeft()\n```\n## penDown #pendown\n`dot.penDown()` sets the **dot**  draw mode to ON. Turns the LEDs when it moves.\n\n```blocks\ndot.penDown()\n```\n## penUp #penup\n`dot.penUp()` sets the **dot** draw mode to OFF. Does not the LEDs when it moves.\n\n```blocks\ndot.penUp()\n```\n## erase #erase\n`dot.erase()` turns OFF the LED at the current position.\n\n```blocks\ndot.erase()\n```\n## fillScreen #fillscreen\n`dot.fillScreen()` turns ON all the LEDs on the screen and sets **dot** to home position.\n\n```blocks\ndot.fillScreen()\n```\n## clearScreen #clearscreen\n`dot.clearScreen()` turns OFF all the LEDs on the screen and sets **dot** to home position.\n\n```blocks\ndot.clearScreen()\n```\n## speed #speed\n`dot.speed()` determines the speed of how fast **dot** moves on the screen. It is set to default speed of 5.\n\n```blocks\ndot.speed()\n```\n\n# License\n\nMIT\n\n# Supported targets\n\n* for PXT/microbit\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n","dot.ts":"/**\n * Kodely dot an implementation of LOGO turtle\n */\n//% weight=100 color=#0fbc11 icon=\"\\uf111\"\nnamespace dot {\n\n    //% block\n    let _x = 2;\n    let _y = 2;\n    let _direction = 1; // 1-N 2-E 3-S 4-W\n\n    let _pen = 1; //1-down 0-up\n\n    let _turtleSpeed = 5;\n\n    let _prevx = 2;\n    let _prevy = 2;\n    let _prevpixel = 0;\n    /**\n     * Sets the turtle to home position\n     */\n    //% blockId=turtlehome\n    //% block=\"home\"\n    //% weight=1000\n    //% help=home\n    export function home(): void {\n        // Add code here\n        led.plotBrightness(_x, _y, _prevpixel * 100)\n        _x = _y = _prevx = _prevy = 2;\n        _direction = 1;\n        _pen = 1;\n        _prevpixel = 0;\n        led.plotBrightness(_x, _y, 255);\n    }\n\n    /**\n     * Turn the pen off\n     */\n    //% blockId=turtle_pen_up\n    //% block=\"penUp\"\n    //% weight=900\n    //% help=penup\n    export function penUp(): void {\n        _pen = 0;\n    }\n\n    /**\n     * Turn the pen on, so will write as the turtle moves\n     */\n    //% blockId=turtle_pen_down\n    //% block=\"penDown\"\n    //% weight=890\n    //% help=pendown\n    export function penDown(): void {\n        _pen = 1;\n    }\n\n    /**\n     * Set the speed at which the turtle moves, 1 is slow, 10 is fast, default moves at moderate speed\n     * \n     * @param turtleSpeed:Controls the speed the turtle moves.\n     */\n    //% blockId=turtle_speed\n    //% block=\"speed %turtleSpeed\"\n    //% turtleSpeed.min=1 turtleSpeed.max=10 turtleSpeed.defl=5\n    //% weight=350\n    //% help=speed\n    export function speed(turtleSpeed: number): void {\n        _turtleSpeed = turtleSpeed;\n    }\n\n    /**\n     * Turn the turtle right\n     */\n    //% blockId=turtleright\n    //% block=\"turn right\"\n    //% weight=700\n    //% help=turnright\n    export function turnRight(): void {\n        _direction = _direction + 1 > 4 ? 1 : _direction + 1;\n    }\n\n    /**\n     * Turn the turtle left\n     */\n    //% blockId=turtleleft\n    //% block=\"turn left\"\n    //% weight=690\n    //% help=turnleft\n    export function turnLeft(): void {\n        _direction = _direction - 1 < 1 ? 4 : _direction - 1;\n    }\n\n    /**\n     * Move the turtle forward\n     */\n    //% blockId=turtle_move_forward\n    //% block=\"move forward\"\n    //% weight=650\n    //% help=moveForward\n    export function moveForward(): void {\n        let _incr = 1;\n        if (_direction == 1 || _direction == 4) _incr = -1\n\n        if (_pen) {\n            led.plotBrightness(_x, _y, 100)\n        } else {\n            led.plotBrightness(_x, _y, _prevpixel * 100)\n        }\n\n        if (_direction == 2 || _direction == 4) {\n            _x = _x + _incr\n            _x = _x > 4 ? 4 : _x < 0 ? 0 : _x\n        }\n        else {\n            _y = _y + _incr\n            _y = _y > 4 ? 4 : _y < 0 ? 0 : _y\n        }\n        _prevpixel = led.point(_x, _y) ? 1 : 0;\n        led.plotBrightness(_x, _y, 255);\n        basic.pause((10-_turtleSpeed) * 100)\n    }\n\n    /**\n     * Move the turtle backward\n     */\n    //% blockId=turtle_move_backward\n    //% block=\"move backward\"\n    //% weight=600\n    //% help=movebackward\n    export function moveBackward(): void {\n        let _incr = -1;\n        if (_direction == 1 || _direction == 4) _incr = 1\n\n        if (_pen) {\n            led.plotBrightness(_x, _y, 100)\n        } else {\n            led.plotBrightness(_x, _y, _prevpixel * 100)\n        }\n\n        if (_direction == 2 || _direction == 4) {\n            _x = _x + _incr\n            _x = _x > 4 ? 4 : _x < 0 ? 0 : _x\n        }\n        else {\n            _y = _y + _incr\n            _y = _y > 4 ? 4 : _y < 0 ? 0 : _y\n        }\n        _prevpixel = led.point(_x, _y) ? 1 : 0;\n        led.plotBrightness(_x, _y, 255);\n        basic.pause((10 - _turtleSpeed) * 100)\n    }\n\n    /**\n     * Erase the pixel at current position\n     */\n    //% blockId=erase\n    //% block=\"erase\"\n    //% weight=500\n    //% help=erase\n    export function erase(): void {\n        led.plotBrightness(_x, _y, 0);\n        _prevpixel = led.point(_x, _y) ? 1 : 0;\n    }\n\n    /**\n     * Clear the screen\n     */\n    //% blockId=clear_screen\n    //% block=\"clear screen\"\n    //% weight=390\n    //% help=clearscreen\n    export function clearScreen(): void {\n        basic.clearScreen()\n        home();\n    }\n\n    /**\n     * Fill Screen \n     */\n    //% blockId=fill_screen\n    //% block=\"fill screen\"\n    //% weight=400\n    //% help=fillscreen\n    export function fillScreen(): void {\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 5; j++) {\n                led.plotBrightness(i, j, 100);\n            }\n        }\n        home();\n    }\n\n}","pxt.json":"{\n    \"name\": \"dot\",\n    \"version\": \"1.0.8\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"dot.ts\"\n    ],\n    \"testFiles\": [],\n    \"targetVersions\": {\n        \"target\": \"4.0.16\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}